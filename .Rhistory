separate(year, into = c("century", "year"), sep = 2)
table5 %>%
unite(new, century, year)
# 12.4.2 Unite
table5
table5 %>%
unite(new, century, year)
# 12.4.2 Unite
table5
table5 %>%
unite(new, century, year)
# 12.4.2 Unite
table5
table5 %>%
unite(new, century, year, sep = "")
table5 %>%
unite(new, century, year)
library(tidyverse)
library(dplyr)
library(ggplot2)
table3 %>%
separate(rate, into = c("cases", "population"))
table3 %>%
separate(rate, into = c("cases", "population"), sep = "/")
table5 %>%
unite(new, century, year, sep = "")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
?separate
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = Warn)
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "Warn")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "warn")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
?separate
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "drop")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"),extra = "drop")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), extra = "drop")
?separate
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "right")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "left")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "right")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "warn")
?separate
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table3 %>%
separate(year, into = c("century", "year"), sep = 2, remove = true)
table3 %>%
separate(year, into = c("century", "year"), sep = 2, remove = "true")
table3 %>%
separate(year, into = c("century", "year"), sep = 2, remove "true")
table3 %>%
separate(year, into = c("century", "year"), sep = 2, remove = "true")
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table3 %>%
separate(year, into = c("century", "year"), sep = 2, remove = "true")
?separate
?separate
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
complete(year, qtr)
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment
treatment %>%
fill(person)
treatment %>%
fill(person)
stocks
stocks %>%
complete(year, qtr)
stocks
stocks
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks
stocks %>%
complete(year, qtr)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c('2015','2016'),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
who
View(who)
who1 <- who %>%
pivot_longer(
cols(new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE)
)
who1 <- who %>%
pivot_longer(
cols(new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE)
)
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE)
who1
View(who1)
View(who)
who1 %>%
count(key)
who1 %>%
count(key)
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
who1 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE)
View(who1)
who2 <- who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2
View(who2)
View(who3)
who3 <- who2 %>%
separate(key, c("new", "type", "sexage"), sep = "_")
View(who3)
who3 %>%
count(new)
who4 <- who3 %>%
select(-new, -iso2, -iso3)
View(who4)
View(who5)
who5 <- who4 %>%
separate(sexage, c("sex", "age"), sep = 1)
View(who5)
View(who5)
library(tidyverse)
library(skimr)
skim(hotels)
skim(hotels)
library(tidyverse)
library(skimr)
# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md
hotels <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv")
skim(hotels)
skim(hotels)
skim(hotels)
**Note:** You will need to set `eval=TRUE` when you have an answer you want to try out.
View(hotels)
```{r travel-whim, eval=FALSE}
hotels %>%
filter(
country != "USA",
lead_time < 1
)
```
hotels %>%
filter(
country != "USA",
lead_time < 1
)
hotels %>%
filter(
country != "USA",
lead_time < 1
)
hotels2 <- hotels %>%
filter(
country != "USA",
lead_time < 1
)
View(hotels2)
### Exercise 3.
(hotels2 <- hotels %>%
filter(
country != "USA",
lead_time < 1
))
(hotels %>%
filter(
children >= 1 [OR] babies >= 1
))
(hotels %>%
filter(
children >= 1 || babies >= 1
))
View(hotels3)
(hotels3 <- hotels2 %>%
filter(
children >= 1 || babies >= 1
))
View(hotels3)
(hotels3 <- hotels %>%
filter(
children >= 1 || babies >= 1
))
View(hotels2)
(hotels3 <- hotels %>%
filter(
children >= 1 || babies >= 1
))
View(hotels3)
(hotels3 <- hotels %>%
filter(
children >= 1 | babies >= 1
))
(hotels3 <- hotels %>%
filter(
children >= 1 | babies >= 1
))
View(hotels3)
(hotels2 <- hotels %>%
filter(
country != "USA",
lead_time < 1
))
View(hotels2)
(hotels3 <- hotels %>%
filter(
children >= 1 | babies >= 1
))
(bookings_with_little_ones <- hotels %>%
filter(
children >= 1 | babies >= 1
))
View(bookings_with_little_ones)
bookings_with_little_ones <- hotels %>%
filter(
children >= 1 | babies >= 1
)
hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
)
nrow()
hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
)
nrow()
hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
)
nrow()
hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
) %>%
nrow()
hotels %>%
filter(
hotel == "City Hotel",
children >= 1 | babies >= 1
) %>%
nrow()
resort_hotels_little_ones <- hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
) %>%
nrow()
resort_hotels_little_ones <- hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
) %>%
nrow()
resort_hotels_little_ones <- hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
) %>%
nrow()
(resort_hotels_little_ones <- hotels %>%
filter(
hotel == "Resort Hotel",
children >= 1 | babies >= 1
) %>%
nrow())
(city_hotels_little_ones <- hotels %>%
filter(
hotel == "City Hotel",
children >= 1 | babies >= 1
) %>%
nrow())
hotels %>%
count(adults, sort = TRUE)
# Not cancelled
hotels %>%
filter(is_canceled == 0) %>%
count(adults , sort = TRUE)
# Cancelled
hotels %>%
filter(is_canceled == 1) %>%
count(adults , sort = TRUE)
# Not cancelled
hotels %>%
filter(is_canceled == 0) %>%
count(adults , sort = TRUE)
# Cancelled
hotels %>%
filter(is_canceled == 1) %>%
count(adults , sort = TRUE)
# Not cancelled
hotels %>%
filter(is_canceled == 0) %>%
count(adults , sort = TRUE)
# Cancelled
hotels %>%
filter(is_canceled == 1) %>%
count(adults , sort = TRUE)
# Not cancelled
hotels %>%
filter(is_canceled == 0) %>%
count(adults , sort = TRUE)
hotels %>%
summarise(
min_adr = min(adr),
mean_adr = mean(adr),
med_adr = median(adr),
max_adr = max(adr)
)
hotels %>%
group_by(hotel) %>%
summarise(
min_adr = min(adr),
mean_adr = mean(adr),
med_adr = median(adr),
max_adr = max(adr)
)
View(hotels)
hotels %>%
filter(adr = min(adr))
hotels %>%
filter(adr == min(adr))
hotels %>%
filter(adr == min(adr)) %>%
relocate(adr)
hotels %>%
filter(adr == min(adr) | adr == max(adr)) %>%
relocate(adr)
hotels %>%
filter(adr == min(adr) | adr == max(adr)) %>%
select(adr, hotel, arrival_date_year, arrival_date_day_of_month, adults, children, babies)
hotels %>%
filter(adr == min(adr) | adr == max(adr)) %>%
select(adr, hotel, arrival_date_year, arrival_date_day_of_month, adults, children, babies, is_canceled)
library("ggplot2")
library("palmerpenguins")
library("openintro")
library("janitor")
library("dplyr")
library("ggridges")
library("tidyverse")
starwars %>%
select(name, height, mass)
starwars %>%
group_by(gender) %>%
summarize(
avg_ht = mean(height, na.rm = TRUE)
)
starwars %>%
group_by(gender) %>%
summarize(
avg_ht = mean(height, na.rm = TRUE)
)
# Concatenation
c(1, 2, 3)
c("Hello", "World!")
c(c("Hi","Hello"), c("Bye","Jello"))
View(trimmed_trip_data)
setwd("C:/Users/Kyle Holland/OneDrive/Education/Coursera/Google Data Analytics/Google Data Analytics Capstone/Capstone/Case Study - Track 1/Data-Analytics-Cyclistic-Case-Study")
library(tidyverse)
library(janitor)
library(readr)
library(tidyr)
library(chron)
library(plyr)
library(dplyr)
library(readr)
# Import and combine twelve months of data into one
combined_trip_data <- list.files(path = "./Datasets/Modified CSV Files",  # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%                              # Store all files in list
bind_rows                                         # Combine data sets into one data set
# Review the data
#View(combined_trip_data)
glimpse(combined_trip_data)
# Trim the dataset to only include the most relevant information
trimmed_trip_data <- combined_trip_data %>%
select(rideable_type, ride_length, day_of_week, member_casual)
glimpse(trimmed_trip_data)
# Determine which columns/rows contain the most NA's.
sapply(trimmed_trip_data, function(x) sum(is.na(x)))
sapply(trimmed_trip_data, function(x) sum(is.na(x)))
# Remove rows
trimmed_trip_data <- na.omit(trimmed_trip_data)
sapply(trimmed_trip_data, function(x) sum(is.na(x)))
glimpse(trimmed_trip_data)
summarise(trimmed_trip_data)
trimmed_trip_data %>%
summarise(trimmed_trip_data)
